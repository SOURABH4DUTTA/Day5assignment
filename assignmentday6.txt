package PackageProduct;

public class ExceptionTest {

	public static void main(String[] args) {
		// TODO Auto-generated method stub
		System.out.println("Main Loop begins");
		Locker h1 = new Locker(102, " Nathan Cherian ", "Hyderabad", "bund",569875);
		Locker h2 = new Locker(112, " Paulomi Ghosh ", "Kolkata", "roop",459687);
		LockerOwner lo1 = new LockerOwner();
		LockerOwner lo2 = new LockerOwner();
		LockerKey hk1 = new LockerKey("bund");
		LockerKey hk2 = new LockerKey("roop");
		
		Thread td1 = new Thread(h1);
		td1.start();
		Thread td2 = new Thread(h2);
		td2.start();
		
		try
		{
			lo1.openTheLocker(h1,hk1);
		}
		catch (LockException e) {
			// TODO: handle exception
			System.out.println("Lock Problem "+e);
		}
		catch (UnlockException e) {
			// TODO: handle exception
			System.out.println("Unlock Problem "+e);
		}
		System.out.println("locker Details "+h1);
		System.out.println("Main Loop ends");

	}

}
//Interface
interface Gentlemen
{
	void openTheLocker(Cabinet1 cb,Key k) throws LockException,UnlockException;
	void operates();
	void keepThings();
}

class LockerOwner implements Gentlemen
{
	String name;
	@Override
	public void keepThings() {
		// TODO Auto-generated method stub
		System.out.println("Operating locker");
	}
	@Override
	public void openTheLocker(Cabinet1 cb, Key k) throws LockException,UnlockException  //Passing Object Parameter & Exception handling
	 {
		// TODO Auto-generated method stub
		Locker bank =(Locker) cb;
		if(bank.dr.password.equals(k.password))
		{
			bank.dr.unlocklocker();
		}
		else
		{
			throw new UnlockException("unable to lock");
		}
		k.unlockPwd();
		if(bank.dr.password.equals(k.password))
		{
			bank.dr.locklocker();
		}
		else
		{
			throw new LockException("unable to unlock");
		}
	}
	@Override
	public void operates() {
		// TODO Auto-generated method stub
		
	}
}

//Customised Exceptions
class UnlockException extends Exception
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	UnlockException(String str)
	{
	super(str);
	}
}
class LockException extends Exception
{
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	LockException(String str)
	{
	super(str);
	}
}

//abstract class, Inheritance
abstract class Key
{
	String password;
	abstract void unlockPwd();
	abstract void lockPwd();
}
class LockerKey extends Key
{
	protected LockerKey(String password)   //Protected Access Specifier
	{
		super();
		this.password = password;
	}
	@Override
	void unlockPwd() {                      //Default Access Specifier
		// TODO Auto-generated method stub
		System.out.println("pwd is unlocked");
	}

	@Override
	void lockPwd() {
		// TODO Auto-generated method stub
		System.out.println("pwd is locked");
	}
}
abstract class Lock
{
	String password;
	abstract void unlocklocker();
	abstract void locklocker();
}
class LockerLock extends Lock
{
    public LockerLock(String password)
	{
		super();
		this.password = password;
	}
	@Override
	void unlocklocker() {
		// TODO Auto-generated method stub
		System.out.println("Locker is unlocked");
	}

	@Override
	void locklocker() {
		// TODO Auto-generated method stub
		System.out.println("Locker is locked");
	}
	
}

class Parking
{
	
}
class BankCarParking extends Parking   //IsA 
{
	void parkingAvailable()
	{
		System.out.println("Please park the car in the parking ");
		
	}
}
class Cabinet1 
{
	
}
class Locker extends Cabinet1 implements Runnable //MultiThreading
{
	int lockerNumber;
	String lockerHolderName;
	String address;
	Lock dr;
	int pincode; 
    Parking p = new BankCarParking(); //HasA
   
	public Locker(int lockerNumber, String lockerHolderName, String address,String pwd,int pincode) {
		super();                           // super class Constructor
		this.lockerNumber = lockerNumber;
		this.lockerHolderName = lockerHolderName;
		this.address = address;
		 dr = new LockerLock(pwd);
		 this.pincode = pincode;
	}
	
	@Override
	public String toString() {
		return "Locker [lockerNumber=" + lockerNumber + ", lockerHolderName=" + lockerHolderName + ", address="
				+ address + ", dr=" + dr + ", pincode=" + pincode + ", p=" + p + "]";
	}

	@Override
	public void run() {
		// TODO Auto-generated method stub
		System.out.println("Testing MultiThread");
		for(int i=1;i<=100;i++)
		{
			System.out.println(lockerHolderName+"Testing "+i);
		}
	}
	
}
